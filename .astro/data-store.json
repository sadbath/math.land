[["Map",1,2,9,10,49,50],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.13.3","content-config-digest","7b2c625210d9b6f7","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://sadbath.github.io\",\"compressHTML\":true,\"base\":\"/math.land\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[],\"responsiveStyles\":false},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false,\"liveContentCollections\":false,\"csp\":false,\"staticImportMetaEnv\":false,\"chromeDevtoolsWorkspace\":false},\"legacy\":{\"collections\":false}}","chapters",["Map",11,12,22,23,31,32,39,40],"adv-func/1-polynomials",{"id":11,"data":13,"body":17,"filePath":18,"digest":19,"legacyId":20,"deferredRender":21},{"title":14,"chapterNumber":15,"editUrl":16},"Polynomials",1,"https://github.com/sadbath/math.land/blob/main/src/content/chapters/adv-func/polynomials-intro.mdx","import Link from '../../../components/Link.astro';\r\nimport Emph from '../../../components/Emph.astro';\r\nimport Highlight from '../../../components/Highlight.astro';\r\nimport RuleList from '../../../components/RuleList.astro';\r\nimport Admonition from '../../../components/Admonition.astro';\r\nimport PolynomialEndBehaviour from '../../../components/games/adv-func/PolynomialEndBehaviour.astro'\r\nimport FindTheDegree from '../../../components/games/adv-func/FindTheDegree.astro'\r\nimport IsItAPolynomial from '../../../components/games/adv-func/IsItAPolynomial.astro'\r\n\r\n\r\nAdvanced Functions is \u003CHighlight color=\"yellow\">HARD\u003C/Highlight>. Everyone says it, so it must be true... right?\r\n\r\nBut *why* is it hard? The \u003CEmph>quadratic formula\u003C/Emph> looks like witchcraft to an 8th grader, yet we know it's just a shortcut. That's the secret to all of math: the more you learn, the more shortcuts you find.\r\n\r\n> Math isn't hard, it just **looks** hard.\r\n\r\nAdvanced Functions isn't a new subject—it's the \u003CEmph>DLC to Functions\u003C/Emph>. To get started on this DLC, let's revisit a topic we all know and \"love\": the \u003CLink href=\"/chapters/adv-func/polynomials\" type=\"name\">Polynomials\u003C/Link>.\r\n\r\n---\r\n\r\n## Anatomy of a Polynomial\r\n\r\nA **Polynomial** is an expression with one or more pieces, called **terms**, added or subtracted. They're the simple, reliable building blocks for this journey. Let's put a typical one under the microscope: `7x² + x - 3`.\r\n\r\nThis polynomial is built from three terms: `7x²`, `x`, and `-3`. To describe it properly, we use some key vocabulary:\r\n\r\n*   **Coefficient:** The number multiplying a variable. In \u003CHighlight color=\"green\">7\u003C/Highlight>x², the coefficient is **7**. For `x`, it's an invisible **1**.\r\n*   **Constant:** The term that's just a number, with no variable in sight. Here, it's \u003CHighlight color=\"pink\">-3\u003C/Highlight>. Its value never changes.\r\n*   **Degree:** The single **highest exponent** in the entire polynomial. For `7x² + x - 3`, the highest exponent is **2**, so the degree is **2**. This is the most important clue to a polynomial's behavior.\r\n\r\n> The name is a clue! *Poly-nomial* literally means \"many terms.\" We have special names for the smaller ones:\r\n> - **Monomial:** One term (`5x³`)\r\n> - **Binomial:** Two terms (`x² - 9`)\r\n> - **Trinomial:** Three terms (`x² + 2x + 1`)\r\n\r\n\u003CFindTheDegree />\r\n\r\n---\r\n\r\n## The One Rule to Rule Them All\r\n\u003CAdmonition type=\"warning\"> this is a very poor attempt at a LotR reference. i am sorry\u003C/Admonition>\r\n\r\n\r\n> The exponents on the variables **must be whole numbers** (0, 1, 2, 3, ...).\r\n\r\nNo fractions. No negatives. If an exponent isn't a clean, non-negative integer, it's not a polynomial. It's that simple. If it passes this check, you can identify it every time.\r\n\r\n\u003CRuleList type=\"good\" title=\"These ARE Polynomials:\">\r\n    - `7x² + 3` (Exponents `2` and `0` are whole numbers.)\r\n    - `x⁵ - 2x⁴ + x` (Exponents `5`, `4`, and `1` are all good.)\r\n    - `12` (This is really `12x⁰`. The exponent is `0`, which is a whole number!)\r\n\u003C/RuleList>\r\n\r\n\u003CRuleList type=\"bad\" title=\"These are NOT Polynomials:\">\r\n    - `3x⁻² + 1` (The `-2` is negative, which is not allowed.)\r\n    - `√x + 5` (A square root is a fractional exponent: `x¹/²`. Not a whole number.)\r\n    - `4/x - x²` (A variable in the denominator is a negative exponent: `4x⁻¹`. No go.)\r\n\u003C/RuleList>\r\n\r\nIf you see weird stuff like roots or variables in the denominator, you're looking at a different beast, like a \u003CLink href=\"/chapters/adv-func/rational-functions\" type=\"name\">Rational Function\u003C/Link>, which we'll tackle later.\r\n\r\n\u003CIsItAPolynomial />\r\n\r\n---\r\n\r\n## What the Degree Tells You: A Prediction Machine\r\n\r\nClassifying a polynomial is easy, but *why* do we do it? Because its **degree** is a prediction machine. It tells you about the graph's overall shape, its turning points, and where its arms are headed.\r\n\r\nFirst, let's give them their proper names based on their degree:\r\n\r\n| Degree | Name              | Example           |\r\n|--------|-------------------|-------------------|\r\n| 0      | Constant          | `7`               |\r\n| 1      | Linear            | `x + 1`           |\r\n| 2      | Quadratic         | `x² - 4x + 3`     |\r\n| 3      | Cubic             | `-2x³ + 5`        |\r\n| 4+     | Quartic, Quintic… | *Depends on degree* |\r\n\r\nNow, here's what that degree number actually tells you:\r\n\r\n### End Behavior: Where Are You Headed?\r\nTo figure out where a polynomial's graph is going as `x → ±∞`, you only need the **leading term** (the one with the biggest exponent). It's the driver; the rest of the terms are just passengers.\r\n\r\n| Degree | Leading Coefficient | End Behaviour          |\r\n|--------|---------------------|------------------------|\r\n| Even   | Positive            | Up on both ends (↑↑)   |\r\n| Even   | Negative            | Down on both ends (↓↓) |\r\n| Odd    | Positive            | Left down, right up (↙↗) |\r\n| Odd    | Negative            | Left up, right down (↗↙) |\r\n\r\n### Turning Points & X-Intercepts: The Wiggles\r\nThe degree also sets a limit on how complex the graph can be.\r\n\r\n> A polynomial of degree **n** can have at most **n** x-intercepts and at most **n-1** turning points (the \"hills\" and \"valleys\").\r\n\r\nA degree 2 function (quadratic) has at most 1 turning point. A degree 5 function (quintic) can have up to 4 turning points. The rule is simple: **the higher the degree, the more *wiggle* the graph is allowed to have.**\r\n\r\n---\r\n\r\n## Next Up…\r\n\r\nNow that we know how to recognize, classify, and read the basic signals of a polynomial, we’re ready to start pulling them apart.\r\n\r\nUp next, we’ll dive into:\r\n- Factoring polynomials\r\n- The Factor Theorem (your new best friend)\r\n- Long division (yes, from elementary school, but with ✨*more algebra*✨)\r\n- Transformations, symmetry, and more\r\n\r\n\u003CLink href=\"/chapters/adv-func/polynomials-factoring\" type=\"next\">Let’s get factoring →\u003C/Link>","src/content/chapters/adv-func/1-polynomials.mdx","d83514aa4e78877e","adv-func/1-polynomials.mdx",true,"functions/1-functions",{"id":22,"data":24,"body":27,"filePath":28,"digest":29,"legacyId":30,"deferredRender":21},{"title":25,"chapterNumber":15,"editUrl":26},"What is a Function?","https://github.com/sadbath/math.land/blob/main/src/content/chapters/functions/1-functions.mdx","import Link from '../../../components/Link.astro';\r\nimport Emph from '../../../components/Emph.astro';\r\nimport Highlight from '../../../components/Highlight.astro';\r\nimport RuleList from '../../../components/RuleList.astro';\r\n\r\nFunctions is often called the \u003CHighlight color=\"yellow\">biggest jump\u003C/Highlight> in your high school math career. It takes the rules of algebra you already know, borrows some ideas from graphing lines, and builds a whole new way of looking at math.\r\n\r\nBut... is it HARD? It can feel that way. It’s not just more algebra; it’s a new \u003CEmph>way of organizing it\u003C/Emph>.\r\n\r\nI don't think it's hard. In fact, every single topic in this course relies on one base idea. If you can master what a function *is*, you've already won half the battle. So this chapter will answer that one burning question.\r\n\r\n### Meet the Function Machine\r\n\r\nAt its heart, a function is simple: it's a machine that takes an **input** and gives you a predictable **output**.\r\n\r\nImagine a machine with a slot for an input, a gear that does some work, and a chute for the output. Let's use pseudo-code to describe what's inside. You don't need any coding experience to get it.\r\n\r\n```\r\nfunction P(x):\r\n    return x^2\r\n```\r\n\r\nAnd... that's it! This describes a machine that:\r\n1.  Takes an input, which we call `x`.\r\n2.  Performs a specific, pre-defined operation on it (in this case, squaring it).\r\n3.  Returns the result.\r\n\r\nIn standard math notation, we write this as:\r\n`f(x) = x²`\r\n\r\nThis is read as \"\u003CEmph>f of x equals x squared\u003C/Emph>.\" It means \"there is a function named `f` that takes an input `x` and gives back `x²`.\"\r\n\r\nIf you put a `5` in the `x` slot, the machine whirs to life and calculates `5²`. A `25` comes out of the chute. We write this as `f(5) = 25`.\r\n\r\n### The One Big Rule\r\n\r\nHere is the single most important rule that makes a function a function. If you remember one thing, make it this.\r\n\r\n> For any given input, a function must produce **exactly one** output.\r\n\r\nThink of a vending machine. If you press button C4 for chips, you expect to get chips. You wouldn't be happy if the machine sometimes gave you chips and sometimes gave you a soda for the *same button press*. That machine would be broken and unpredictable.\r\n\r\nFunctions are like reliable vending machines. One input, one specific output. Every time.\r\n\r\n### So, What's a Relation Then?\r\n\r\nThis brings us to a broader category called a **Relation**. A relation is simply *any* relationship between sets of inputs and outputs.\r\n\r\n> A **Function** is a special, well-behaved type of **Relation**.\r\n\r\nAll functions are relations, but not all relations are functions. A relation becomes a function only when it follows The One Big Rule.\r\n\r\n\u003CRuleList type=\"good\" title=\"These ARE Functions (Reliable Machines):\">\r\n    - `y = x + 3` (If you input `x=2`, the only possible output is `y=5`.)\r\n    - `y = x²` (If you input `x=3`, the only possible output is `y=9`.)\r\n    - `f(x) = 7` (This is a constant function. No matter what you input, the output is always `7`. This is fine! Each input still has only one output.)\r\n\u003C/RuleList>\r\n\r\n\u003CRuleList type=\"bad\" title=\"These are Relations, but NOT Functions (Broken Machines):\">\r\n    - `x = y²` (If you input `x=9`, what is `y`? It could be `3` or it could be `-3`. One input gives two possible outputs. Not a function!)\r\n    - `x² + y² = 25` (This is the equation of a circle. If you input `x=3`, `y` could be `4` or `-4`. One input, two outputs.)\r\n\u003C/RuleList>\r\n\r\n### The Quick Check: The Vertical Line Test\r\n\r\nWhen you have a graph, there’s a super-easy way to check if it represents a function. It's called the **Vertical Line Test**.\r\n\r\n> If you can draw a vertical line anywhere on a graph and it crosses the curve **more than once**, it is **not** a function.\r\n\r\nWhy does this work? A vertical line represents a single `x` value. If that line hits the graph in two different spots, it means that one `x` value (your input) corresponds to two different `y` values (your outputs). This breaks The One Big Rule!\r\n\r\n**This IS a Function:** (A parabola, `y=x²`)\r\nNo matter where you draw a vertical line, it only ever touches the curve once.\r\n\r\n\r\n**This is NOT a Function:** (A circle, `x²+y²=25`)\r\nA vertical line can cross the circle in two places. For an input of `x=3`, you get outputs of `y=4` and `y=-4`.\r\n\r\n\r\nAnd that's the core idea. A function is just a predictable rule that connects inputs to outputs, one for one. Now that you have this foundation, we can start exploring what these machines can really do.","src/content/chapters/functions/1-functions.mdx","4422726a89038cf5","functions/1-functions.mdx","markdown-tests/design",{"id":31,"data":33,"body":35,"filePath":36,"digest":37,"legacyId":38,"deferredRender":21},{"title":34,"chapterNumber":15,"editUrl":26},"MDX Style Guide & Test Page","import Link from '../../../components/Link.astro';\r\nimport Emph from '../../../components/Emph.astro';\r\nimport Highlight from '../../../components/Highlight.astro';\r\nimport RuleList from '../../../components/RuleList.astro';\r\nimport Admonition from '../../../components/Admonition.astro';\r\nimport ColoredTitle from '../../../components/ColoredTitle.astro';\r\n\r\n\r\nThis page demonstrates all the standard Markdown and custom component capabilities available in this project. If everything on this page renders correctly, your setup is perfect.\r\n\r\n\u003CColoredTitle text=\"Full Component & Style Guide\" />\r\n\r\nThis page demonstrates all the standard Markdown and custom component capabilities available in this project.\r\n\r\n\r\n\r\n## Custom Inline Components\r\n\r\nThese components are designed to be used within paragraphs of text.\r\n\r\n### Highlight & Emph\r\n\r\nThe \u003CEmph>Emph\u003C/Emph> component adds a subtle squiggle emphasis. The \u003CHighlight color=\"yellow\">Highlight\u003C/Highlight> component makes text stand out with an italic, bold style. You can change the color to \u003CHighlight color=\"pink\">pink\u003C/Highlight>, \u003CHighlight color=\"green\">green\u003C/Highlight>, or \u003CHighlight color=\"blue\">blue\u003C/Highlight>.\r\n\r\n### Custom Link Component\r\n\r\nThis component handles different types of links automatically.\r\n- Internal Page Link: \u003CLink href=\"/chapters/adv-func/1-polynomials\" type=\"name\">Polynomials Intro\u003C/Link>\r\n- External Site Link: \u003CLink href=\"https://astro.build\" type=\"external\">Astro Docs\u003C/Link>\r\n- Squiggle Link (default): \u003CLink href=\"/\">Home Page\u003C/Link>\r\n\r\n---\r\n\r\n## Custom Block Components\r\n\r\nThese are larger components that structure content on the page.\r\n\r\n### Rule Lists\r\n\r\nThese are great for \"do\" and \"don't\" lists.\r\n\r\n\u003CRuleList type=\"good\" title=\"Good Practices:\">\r\n    - Use semantic HTML.\r\n    - Write clear and concise content.\r\n    - `code snippets` are automatically styled.\r\n\u003C/RuleList>\r\n\r\n\u003CRuleList type=\"bad\" title=\"Bad Practices:\">\r\n    - Forgetting to restart the dev server.\r\n    - `mutating state` directly in a reactive framework.\r\n    - Assuming a client-side script will just work.\r\n\u003C/RuleList>\r\n\r\n### Admonitions\r\n\r\nThis is the definitive test for our component system.\r\n\r\n\u003CAdmonition type=\"note\">\r\n    This is a **note**. It's for supplementary information. You can use *Markdown* inside!\r\n\u003C/Admonition>\r\n\r\n\u003CAdmonition type=\"tip\" title=\"Pro Tip:\">\r\n    You can provide a custom title. This is useful for helpful advice or shortcuts.\r\n\u003C/Admonition>\r\n\r\n\u003CAdmonition type=\"warning\">\r\n    This is a warning. It calls attention to potential pitfalls or important details that should not be overlooked.\r\n\u003C/Admonition>\r\n\r\n\u003CAdmonition type=\"danger\">\r\n    This is for critical information. Ignoring this could lead to incorrect results or fundamental misunderstandings.\r\n\u003C/Admonition>\r\n\r\n---\r\n\r\n## Standard Markdown\r\n\r\nJust to be sure, here are the basics.\r\n\r\n> This is a standard blockquote, styled differently from our Admonitions.\r\n\r\n- An unordered list\r\n- With a few items\r\n1. And a nested\r\n2. ordered list\r\n\r\n```javascript\r\n// A standard code block\r\nfunction test() {\r\n  return \"Everything works!\";\r\n}","src/content/chapters/markdown-tests/design.mdx","ef00d7fbbb567358","markdown-tests/design.mdx","adv-func/2-test",{"id":39,"data":41,"body":45,"filePath":46,"digest":47,"legacyId":48,"deferredRender":21},{"title":42,"chapterNumber":43,"editUrl":44},"The “Test”",2,"https://github.com/sadbath/math.land/blob/main/src/content/chapters/test.mdx","import Link from '../../../components/Link.astro';\r\n\r\nThe first mass-produced CPU was the \u003CLink href=\"https://en.wikipedia.org/wiki/Intel_4004\" type=\"external\">Intel 4004\u003C/Link>, designed in the late 60s by an Italian physicist and engineer named \u003CLink href=\"https://en.wikipedia.org/wiki/Federico_Faggin\" type=\"name\">Federico Faggin\u003C/Link>. It was a 4-bit architecture instead of the 64-bit systems we use today, and it was far less complex than modern processors, but a lot of its simplicity does still remain.\r\n\r\nLet's look at another \u003CLink href=\"/chapters/multitasking\">internal link\u003C/Link> using the default squiggle style.","src/content/chapters/adv-func/2-test.mdx","b11dbe719ebad87b","adv-func/2-test.mdx","topics",["Map",51,52],"adv-func",{"id":51,"data":53,"filePath":56,"digest":57},{"title":54,"description":55},"Advanced Functions","A complete guide to mastering the core concepts of advanced functions. We'll explore transformations, domain and range, inverses, and composite functions with clear, intuitive explanations.","src/content/topics/adv-func.json","7bb439e485b14a5e"]